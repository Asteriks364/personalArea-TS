{"version":3,"sources":["serviceWorker.js","Components/AuthenticatedAppWrapper/AuthenticatedAppWrapper.tsx","Components/LoginForm/LoginForm.tsx","Components/UnauthenticatedApp/UnauthenticatedApp.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AuthenticatedAppWrapper","React","initLoading","setInitLoading","loading","setLoading","data","setData","list","setList","fakeDataUrl","raw","localStorage","getItem","JSON","parse","getData","res","results","setItem","stringify","callback","Axios","method","url","responseType","then","response","console","log","loadMore","style","textAlign","marginTop","height","lineHeight","onClick","concat","Array","map","name","className","itemLayout","dataSource","renderItem","item","Item","actions","key","avatar","title","active","Meta","src","picture","medium","href","last","description","LoginForm","onFinish","values","onFinishFailed","errorInfo","rules","required","message","size","placeholder","Password","valuePropName","type","htmlType","UnauthenticatedApp","App","path","component","exact","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.06fd59b9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport Axios from 'axios';\r\nimport { List, Avatar, Button, Skeleton } from 'antd';\r\n\r\nimport './AuthenticatedAppWrapper.css';\r\n\r\nexport const AuthenticatedAppWrapper = (): JSX.Element => {\r\n  const [initLoading, setInitLoading] = React.useState(true as boolean);\r\n  const [loading, setLoading] = React.useState(false as boolean);\r\n  const [data, setData] = React.useState([] as Array<any>);\r\n  const [list, setList] = React.useState([] as Array<any>);\r\n\r\n  const count = 5;\r\n  const fakeDataUrl = `https://randomuser.me/api/?results=${count}&inc=name,gender,email,picture,nat&noinfo`;\r\n\r\n  /* Запись в объект контактов из localStorage */\r\n  React.useEffect(() => {\r\n    const raw = localStorage.getItem('contactList');\r\n    if (raw) {\r\n      setList(JSON.parse(raw));\r\n      setInitLoading(false);\r\n    } else {\r\n      getData((res: { results: any }) => {\r\n        setData(res.results);\r\n        setList(res.results);\r\n        setInitLoading(false);\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  /* Запись объекта контактов в localStorage */\r\n  React.useEffect(() => {\r\n    localStorage.setItem('contactList', JSON.stringify(list));\r\n  }, [list]);\r\n\r\n  const getData = (callback: { (res: any): void; (arg0: any): void }) => {\r\n    Axios({\r\n      method: 'get',\r\n      url: fakeDataUrl,\r\n      responseType: 'stream',\r\n    }).then(function (response) {\r\n      console.log(response.data);\r\n      callback(response.data);\r\n    });\r\n  };\r\n\r\n  const onLoadMore = () => {\r\n    setLoading(true);\r\n    setList(data.concat([...new Array(count)].map(() => ({ loading: true, name: {} }))));\r\n\r\n    getData((res: { results: any }) => {\r\n      setList(data.concat(res.results));\r\n      setLoading(false);\r\n    });\r\n  };\r\n\r\n  const loadMore =\r\n    !initLoading && !loading ? (\r\n      <div\r\n        style={{\r\n          textAlign: 'center',\r\n          marginTop: 12,\r\n          height: 32,\r\n          lineHeight: '32px',\r\n        }}\r\n      >\r\n        <Button onClick={onLoadMore}>loading more</Button>\r\n      </div>\r\n    ) : null;\r\n\r\n  return (\r\n    <div className=\"authenticated-app-wrapper\">\r\n      <div className=\"contacts\">\r\n        <h1>Личный кабинет</h1>\r\n        <List\r\n          className=\"demo-loadmore-list\"\r\n          loading={initLoading}\r\n          itemLayout=\"horizontal\"\r\n          loadMore={loadMore}\r\n          dataSource={list}\r\n          renderItem={(item) => (\r\n            <List.Item\r\n              actions={[<a key=\"list-loadmore-edit\">edit</a>, <a key=\"list-loadmore-more\">more</a>]}\r\n            >\r\n              <Skeleton avatar title={false} loading={item.loading} active>\r\n                <List.Item.Meta\r\n                  avatar={<Avatar src={item.picture.medium} />}\r\n                  title={<a href=\"https://ant.design\">{item.name.last}</a>}\r\n                  description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\"\r\n                />\r\n                <div>content</div>\r\n              </Skeleton>\r\n            </List.Item>\r\n          )}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport { Form, Input, Button, Checkbox } from 'antd';\r\n\r\nimport './LoginForm.css';\r\n\r\nexport const LoginForm = (): JSX.Element => {\r\n  const [loading, setLoading] = React.useState(false as boolean);\r\n\r\n  const onFinish = React.useCallback((values) => {\r\n    console.log('Success:', values);\r\n  }, []);\r\n\r\n  const onFinishFailed = React.useCallback((errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"login-form\">\r\n      <Form name=\"login-form\" onFinish={onFinish} onFinishFailed={onFinishFailed}>\r\n        <div className=\"login-form__inputs-block\">\r\n          <Form.Item name=\"userName\" rules={[{ required: true, message: 'Введите логин' }]}>\r\n            <Input size=\"large\" placeholder=\"Логин\" />\r\n          </Form.Item>\r\n\r\n          <Form.Item name=\"password\" rules={[{ required: true, message: 'Введите пароль' }]}>\r\n            <Input.Password size=\"large\" placeholder=\"Пароль\" />\r\n          </Form.Item>\r\n        </div>\r\n        <Form.Item name=\"remember\" valuePropName=\"checked\">\r\n          <Checkbox>Запоминь меня</Checkbox>\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\" size=\"large\" loading={loading}>\r\n            Войти\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nimport { LoginForm } from '../LoginForm/LoginForm';\r\n\r\nimport './UnauthenticatedApp.css';\r\n\r\nexport const UnauthenticatedApp = (): JSX.Element => {\r\n  return (\r\n    <div className=\"unauthenticated-app\">\r\n      <div className=\"unauthenticated-app__header\">Войти в личный кабинет</div>\r\n      <div className=\"unauthenticated-app__login-form\">\r\n        <LoginForm />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nimport { AuthenticatedAppWrapper } from './Components/AuthenticatedAppWrapper/AuthenticatedAppWrapper';\r\nimport { UnauthenticatedApp } from './Components/UnauthenticatedApp/UnauthenticatedApp';\r\n\r\nimport './App.css';\r\n\r\nexport const App = (): JSX.Element => {\r\n  return (\r\n    <div className=\"app__content\">\r\n      <Switch>\r\n        <Route path=\"/personal\" component={AuthenticatedAppWrapper} />\r\n        <Route exact={true} component={UnauthenticatedApp} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport { App } from './App';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport './style.css';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}